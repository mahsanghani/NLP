# -*- coding: utf-8 -*-
"""airlines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aFitCTZtlw-v5V7-2yDEkdgYGHBOfyqa
"""

from google.colab import drive
drive.mount('/content/drive')



# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/content/drive/MyDrive/Kaggle/Airlines'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# Any results you write to the current directory are saved as output.

"""# Problem Definition

1. **number** of connections
2. **monopoly** of the routes 
3. **airports control**.


The questions that need to be addressed are:
1.  how many routes does Ryanair have?
2.  how many "*exclusive*" routes (i.e. routes served by only one carrier) does Ryanair have?
3.  
    3.a. in case of "*shared*" routes (i.e. routes served by multiple carriers), how many competitors does Ryanair have?<br>
    3.b. in how many airports is Ryanair present? What's Ryanair presence (share of flights) in these airports?

# Data Preparation

## Airlines
"""

airlines_df = (
    pd.read_csv('/content/drive/MyDrive/Kaggle/Airlines/airlines.csv', 
                header=None, names=['id','name','alias','iata','icao','callsign','country','active'],
                na_values=['\\N', '-', 'NAN', 'unknown'])
    .rename(columns=str.lower)
    .rename(columns=lambda col: '_'.join(col.split()))
    .assign(airline_id=lambda df: df.id.map(str))
)

airlines_df.head()

"""## European Airports"""

airports_df = (
    pd.read_csv('/content/drive/MyDrive/Kaggle/Airlines/airports.csv',
                header=None, names=['id', 'name', 'city', 'country', 'iata', 'icao', 'latitude', 
                                    'longitude', 'altitude', 'timezone', 'dst', 'tz', 'type', 'source'],
                na_values=['\\N', '-', 'NAN', 'unknown'])
    .set_index('id')
    .reset_index(drop=True)
)

eur_airports_iata_df = (
    pd.read_csv('/content/drive/MyDrive/Kaggle/Airlines/european_iatas_df.csv',
                header=None, names=['airport_city', 'airport_name', 'airport_iata'],
                na_values=['\\N', '-', 'NAN', 'unknown'])
)

eur_airports_df = (
    airports_df[airports_df.iata.isin(eur_airports_iata_df.airport_iata)].copy()
    [lambda df: ~df.country.isin(['Russia', 'Turkey'])]
    .reset_index(drop=True))

# del airports_df, eur_airports_iata_df

print('All:', airports_df.shape)
print('Europe:', eur_airports_df.shape)
eur_airports_df.head()

"""## European Routes

A route is considered to be European if it connects to European airports.
"""

routes_df = (
    pd.read_csv('/content/drive/MyDrive/Kaggle/Airlines/routes.csv', 
                header=None, names=['airline', 'airline id', 'source', 'source id', 'destination', 
                                    'destination id', 'codeshare', 'stops', 'equipment'],
                na_values=['\\N', '-', 'NAN', 'unknown'])
    .rename(columns=str.strip)
    .rename(columns=str.lower)
    .rename(columns=lambda v: v.replace(' ', '_'))
    .dropna(subset=['airline_id', 'source_id', 'destination_id'], how='any')
    .assign(airline_id=lambda df: df.airline_id.map(int).map(str),
            source=lambda df: df.source.map(str).map(str),
            source_id=lambda df: df.source_id.map(int).map(str),
            destination=lambda df: df.destination.map(str).map(str),
            destination_id=lambda df: df.destination_id.map(int).map(str),
            route_id=lambda df: df[['source', 'destination']].apply(sorted, axis=1).map('_'.join))
)

eur_routes_df = (
    routes_df[
        routes_df.source.isin(eur_airports_df.iata)
        &
        routes_df.destination.isin(eur_airports_df.iata)
    ].copy()
)

print('All:', routes_df.shape)
print('Europe:', eur_routes_df.shape)
eur_routes_df.head()

"""Let's add more details about airline and airports of each route..."""

# eur_routes_df2 = (
#     eur_routes_df
#     .pipe(pd.merge, 
#           airlines_df[['id', 'iata', 'name', 'country']],
#           how='left')
#     .pipe(pd.merge, 
#           eur_airports_df[['iata', 'country', 'city', 'latitude', 'longitude']]
#           .rename(columns=lambda col: 'src_' + col),
#           how='left')
#     .pipe(pd.merge, 
#           eur_airports_df[['iata', 'country', 'city', 'latitude', 'longitude']]
#           .rename(columns=lambda col: 'dst_' + col),
#           how='right')
#     .assign(is_national_route=lambda df: df.src_airport_country == df.dst_airport_country)
#     .assign(dist=lambda df: np.sqrt(
#         (df.dst_airport_longitude - df.src_airport_longitude) ** 2 
#         + (df.dst_airport_latitude - df.src_airport_latitude) ** 2))
# )

# eur_routes_df2

eur_routes_df2 = (
    eur_routes_df
    .pipe(pd.merge, 
          airlines_df[['id', 'icao', 'name', 'country']],
          left_on=['source'], right_on=['icao'], how='left')
    .pipe(pd.merge, 
          eur_airports_df[['iata', 'country', 'city', 'latitude', 'longitude']]
          .rename(columns=lambda col: 'source_' + col),
          left_on=['source'], right_on=['source_iata'], how='left')
    .pipe(pd.merge, 
          eur_airports_df[['iata', 'country', 'city', 'latitude', 'longitude']]
          .rename(columns=lambda col: 'destination_' + col),
          left_on=['destination'], right_on=['destination_iata'], how='right')
    .assign(is_national_route=lambda df: df.source_country == df.destination_country)
    .assign(dist=lambda df: np.sqrt(
        (df.destination_longitude - df.source_longitude) ** 2 
        + (df.destination_latitude - df.source_latitude) ** 2))
)

eur_routes_df2.sort_values(by='airline', ascending=True).value_counts('airline')

"""# Data Analysis"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go

# ensure white background
plt.rcParams['figure.facecolor'] = 'w'

"""## Number of Connections"""

n_connections_srs = (
    eur_routes_df2
    .groupby('airline')
    .route_id
    .nunique()
    .sort_values()[::-1]
    .rename('# Unique Connections')
    .rename_axis('Airline')
)

fig, ax = plt.subplots(figsize=(10,6))

ax.barh(n_connections_srs.index[:25][::-1], n_connections_srs[:25][::-1])
ax.barh('FR', n_connections_srs['FR'], color='navy')

ax.set_xlabel('Connections')

ax.set_title('Unique Connections', weight='bold')
ax.grid(axis='x')
plt.show()

"""## Connections Monopoly (Exclusive Connections)"""

n_exclusive_connections_srs = (
    eur_routes_df2
    .groupby('route_id')
    .airline_id
    .nunique()
    [lambda srs: srs == 1]
    .reset_index()
    .pipe(pd.merge, eur_routes_df2[['route_id', 'airline']], how='left')
    .groupby('airline')
    .route_id
    .nunique()
    .sort_values()[::-1]
    .rename('# Exclusive Connections')
    .rename_axis('Airline')
)

fig, ax = plt.subplots(figsize=(10,6))

ax.barh(n_exclusive_connections_srs.index[:25][::-1], n_exclusive_connections_srs[:25][::-1])
ax.barh('FR', n_exclusive_connections_srs.loc['FR'], color='navy')
ax.set_xlabel('Exclusive Connections')
ax.set_title('Exclusive Connections', weight='bold')
ax.grid(axis='x')

plt.show()

fig, ax = plt.subplots()

ax.pie(n_exclusive_connections_srs, autopct=lambda pct: ('%.2f' % pct) + '%' if pct > 4 else '',
       labels=[al if i < 5 else '' for i, al in enumerate(n_exclusive_connections_srs.index)])

plt.show()

"""## Airport Presence

### Number of Airports
"""

n_airports_srs = (
    eur_routes_df2
    .groupby('airline')
    .source_id
    .nunique()
    .sort_values()[::-1]
    .rename('# Airports')
    .rename_axis('Airline')
)

fig, ax = plt.subplots(figsize=(10,6))

ax.barh(n_airports_srs.index[:25][::-1], n_airports_srs[:25][::-1])
ax.barh('FR', n_airports_srs.loc['FR'], color='navy')
ax.set_xlabel('# Airports')
ax.set_title('Top 25 Airlines\nby Number of Base Airports', weight='bold')
ax.grid(axis='x')

plt.show()

n_airports_srs.head()

"""### Number of Countries"""

n_countries_srs = (
    eur_routes_df2
    .groupby('airline')
    .source_country
    .nunique()
    .sort_values()[::-1]
    .rename('# Countries')
    .rename_axis('Airline')
)

fig, ax = plt.subplots(figsize=(10,6))

ax.barh(n_countries_srs.index[:25][::-1], n_countries_srs[:25][::-1])
ax.barh('FR', n_countries_srs.loc['FR'], color='navy')
ax.set_xlabel('# Countries')
ax.set_title('Top 25 Airlines\nby Number of Base Countries', weight='bold')
ax.grid(axis='x')

plt.show()

"""### Number of Competitors"""

n_competitors_df = (
    eur_routes_df2.groupby('source_id')
    .airline_id.nunique().sub(1)
    .to_frame('n_competitors')
    .reset_index()
    .pipe(pd.merge, eur_routes_df2[['source_id', 'airline']].drop_duplicates())
)

avg_competitors_srs = (
    n_competitors_df
    .groupby('airline')
    .n_competitors
    .mean()
    .sort_values()[::-1]
)

fig, ax = plt.subplots(figsize=(10, 6))

ax.barh(*list(zip(*list(avg_competitors_srs.reindex(index=n_airports_srs.index[:25]).sort_values().iteritems()))))
ax.barh('FR', avg_competitors_srs.loc['FR'], color='navy')
ax.set_xlabel('Competitors per Airport')
ax.set_title('Number of Competitors', weight='bold')
ax.grid(axis='x')

plt.show()

"""### Presence"""

airport_presence_df = (
    eur_routes_df2
    .groupby('source_id')
    .airline
    .apply(lambda srs: srs.value_counts(normalize=True).rename_axis('airline'))
    .rename('airport_presence')
    .reset_index()
)

avg_airport_presence_df = (
    airport_presence_df
    .groupby('airline')
    .airport_presence.mean()
    .sort_values()[::-1]
)

fig, (ax, ax1) = plt.subplots(1, 2, figsize=(16,6))

ax.barh(avg_airport_presence_df.index[:25][::-1], avg_airport_presence_df[:25][::-1])
ax.barh('FR', avg_airport_presence_df.loc['FR'], color='navy')
ax.set_xlabel('Avg Airport Presence (%)')
ax.set_title('Top 25 Airlines\nby Avg Airport Presence', weight='bold')
ax.grid(axis='x')

avg_presence_for_top25_airlines_by_airports = avg_airport_presence_df.reindex(index=n_airports_srs.index[:25]).sort_values()
ax1.barh(avg_presence_for_top25_airlines_by_airports.index, avg_presence_for_top25_airlines_by_airports)
ax1.barh('FR', avg_airport_presence_df.loc['FR'], color='navy')
ax1.set_xlabel('Avg Airport Presence (%)')
ax1.set_title('Avg Airport Presence\namong Top 25 Airlines by Number of Base Airports', weight='bold')
ax1.grid(axis='x')

plt.tight_layout()
plt.show()

avg_airport_presence_df.head()

"""# Conclusions

All the hypothesis were confirmed:
- Ryanair is indeed the airline with the highest number of connections, which implies carrying more passengers than other European airlines;
- Ryanair is indeed the airline with the highest number of exclusive connections, thas is it has the monopoly on the highest number of routes (912 - 34% of all exclusive routes in Europe): all the passengers of these connections were Ryanair passengers for major cause;
- Ryanair is present in the highest number of airports (156). Among the top 25 airlines in this chart, it also has the highest average presence per airport (43.55% - that is, on average it has the 43.55% of all the connections offered by the airport) and the lower number of competitors per airport (around 10).

The data tells us that there are at least other three valid and alternative explanations for Ryanair achievement which actually go against their proposed interpretations. The only thing they got right is that... they need a Senior Data Scientist.
"""